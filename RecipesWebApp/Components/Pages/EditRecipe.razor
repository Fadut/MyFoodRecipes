@page "/edit-recipe/{id:int}"
@using RecipesAPI.Models
@using RecipesWebApp.Services
@inject RecipeService RecipeService
@inject NavigationManager Navigation

<h3>Rediger opskrift</h3>

@if (recipe == null)
{
    <p>Indlæser...</p>
}
else
{
    <div>
        <label>Titel:</label>
        <input @bind="recipe.Title" class="form-control" />

        <label>Beskrivelse:</label>
        <textarea @bind="recipe.Description" class="form-control"></textarea>

        <label>Ingredienser:</label>
        <input @bind="newIngredient" placeholder="Tilføj ingrediens" />
        <button @onclick="AddIngredient">Tilføj</button>

        <ul>
            @foreach (var ingredient in recipe.Ingredients)
            {
                <li>@ingredient <button @onclick="() => RemoveIngredient(ingredient)">❌</button></li>
            }
        </ul>

        <label>Fremgangsmåde:</label>
        <textarea @bind="recipe.Instructions" class="form-control" placeholder="1. Pisk æggene..."></textarea>

        <label>Billede URL:</label>
        <input @bind="recipe.ImageUrl" class="form-control" />

        <button class="btn btn-success mt-3" @onclick="UpdateRecipe">Gem ændringer</button>
    </div>
}

@code {
    [Parameter] public int id { get; set; }
    private Recipe? recipe;
    private string newIngredient = string.Empty;

    private void AddIngredient()
    {
        if (!string.IsNullOrWhiteSpace(newIngredient))
        {
            recipe.Ingredients.Add(newIngredient);
            newIngredient = string.Empty;
        }
    }

    private void RemoveIngredient(string ingredient)
    {
        recipe.Ingredients.Remove(ingredient);
    }

    protected override async Task OnInitializedAsync()
    {
        recipe = await RecipeService.GetRecipeByIdAsync(id);
    }

    private async Task UpdateRecipe()
    {
        if (recipe != null)
        {
            await RecipeService.UpdateRecipeAsync(id, recipe);
            Navigation.NavigateTo("/recipes");
        }
    }
}
