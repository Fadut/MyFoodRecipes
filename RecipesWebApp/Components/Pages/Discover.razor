@page "/discover"
@using RecipesAPI.Models
@using RecipesWebApp.Services
@inject RecipeService RecipeService

<h2>Discover recipes!</h2>

<div class="mb-3">
    <input @bind="title" class="form-control" placeholder="Søg efter titel" />
</div>
<div class="mb-3">
    <input @bind="ingredient" class="form-control" placeholder="Filter på ingredienser" />
</div>
<div class="mb-3">
    <input type="number" @bind="preparationTime" class="form-control" placeholder="Maks tid (min)" />
</div>
<button class="btn btn-primary" @onclick="SearchRecipes">Søg</button>

@if (recipes is not null && recipes.Any())
{
    <div class="container mt-4">
        <div class="row row-cols-1 row-cols-md-3 g-4">
            @foreach (var recipe in recipes)
            {
                <div class="col">
                    <a href="/recipe/@recipe.Id" class="card h-100 text-decoration-none border-0 shadow-sm">
                        <div class="position-relative">
                            <img src="@recipe.ImageUrl" class="card-img-top img-fluid" alt="@recipe.Title" style="object-fit: cover; height: 200px;">
                            <div class="card-img-overlay d-flex flex-column justify-content-end bg-dark bg-opacity-50 text-white p-2">
                                <h5 class="card-title mb-1">@recipe.Title</h5>
                                <span class="badge bg-info">@recipe.PreparationTime min</span>
                            </div>
                        </div>
                    </a>
                </div>
            }
        </div>
    </div>
}
else if (recipes is not null && !recipes.Any())
{
    <p>Ingen opskrifter fundet.</p>
}


@code {
    private List<Recipe>? recipes;

    private string? title;
    private string? ingredient;
    private int? preparationTime;

    protected override async Task OnInitializedAsync()
    {
        recipes = await RecipeService.GetRecipesAsync();
    }

    private async Task SearchRecipes()
    {
        recipes = await RecipeService.SearchRecipesAsync(title, ingredient, preparationTime);
    }
}
