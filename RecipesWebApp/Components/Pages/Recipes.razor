@page "/recipes"
@using RecipesAPI.Models
@using RecipesWebApp.Services
@inject RecipeService RecipeService
@inject NavigationManager Navigation

<PageTitle>Database for opskrifter</PageTitle>

<div class="container mt-4">
    <h3 class="mb-4">Opskrifter (database)</h3>

    @if (recipes is null)
    {
        <div class="alert alert-info">Indlæser opskrifter...</div>
    }
    else
    {
        <button class="btn btn-success mb-4 shadow-sm" @onclick="GoToCreate">
            <i class="bi bi-plus-circle me-1"></i> Opret ny opskrift
        </button>

        @* Shopping list button *@
        <button class="btn btn-primary mb-4 ms-4" type="button" data-bs-toggle="offcanvas" data-bs-target="#shoppingListOffcanvas" aria-controls="shoppingListOffcanvas">
            🛒 Åbn indkøbsliste (@shoppingList.Count)
        </button>

        @* Bootstrap offcanvas to show shopping list as a sidebar *@
        <div class="offcanvas offcanvas-end" tabindex="-1" id="shoppingListOffcanvas" aria-labelledby="shoppingListLabel">
            <div class="offcanvas-header">
                <h5 class="offcanvas-title" id="shoppingListLabel">Min Indkøbsliste</h5>
                <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
            </div>
            <div class="offcanvas-body">
                @if (shoppingList.Count == 0)
                {
                    <p>Ingen varer i indkøbslisten endnu.</p>
                }
                else
                {
                    <ul class="list-group">
                        @foreach (var item in shoppingList)
                        {
                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                @item
                                <button class="btn btn-sm btn-outline-danger" @onclick="@(() => RemoveFromShoppingList(item))">Fjern</button>
                            </li>
                        }
                    </ul>

                    <button class="btn btn-danger mt-3" @onclick="ClearShoppingList">Tøm hele listen</button>
                }
            </div>
        </div>

        <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">
            @foreach (var recipe in recipes)
            {
                <div class="col">
                    <div class="card h-100 shadow-sm">
                        <a href="/recipe/@recipe.Id" class="text-decoration-none text-dark">
                            <img src="@recipe.ImageUrl" class="card-img-top" style="object-fit: cover; height: 200px;" alt="@recipe.Title" />
                        </a>

                        <div class="card-body d-flex flex-column">
                            <h5 class="card-title">@recipe.Title</h5>
                            <p class="card-text text-muted" style="max-height: 4.5em; overflow: hidden;">
                                @recipe.Description
                            </p>

                            <span class="badge rounded-pill bg-info text-dark align-self-start">@recipe.PreparationTime min</span>

                            <p class="mb-1"><strong>Måltid:</strong> @recipe.Category</p>
                            <p class="mb-1"><strong>Cuisine:</strong> @recipe.CuisineType</p>

                            <div style="max-height: 100px; overflow-y: auto;">
                                <strong>Ingredienser:</strong>
                                <ul class="mb-2 ps-3">
                                    @foreach (var ingredient in recipe.Ingredients)
                                    {
                                        <li>@ingredient</li>
                                    }
                                </ul>
                            </div>

                            <div class="mt-auto d-flex gap-2">
                                <button class="btn btn-warning btn-sm w-100" @onclick="() => EditRecipe(recipe.Id)">Rediger</button>
                                <button class="btn btn-danger btn-sm w-100" @onclick="() => ConfirmDelete(recipe.Id, recipe.Title)">Slet</button>
                                <button class="btn btn-info btn-sm w-100" @onclick="() => SaveRecipe(recipe.Id)">Gem til min konto</button>
                                <button class="btn btn-success btn-sm w-100" @onclick="() => AddRecipeToShoppingList(recipe)">Tilføj til indkøbsliste</button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

@* Modal *@
@if (showConfirm)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Bekræft sletning</h5>
                    <button type="button" class="btn-close" @onclick="() => showConfirm = false"></button>
                </div>
                <div class="modal-body">
                    <p>Er du sikker på, at du vil slette <strong>@recipeTitleToDelete</strong>?</p>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="() => showConfirm = false">Annuller</button>
                    <button class="btn btn-danger" @onclick="DeleteConfirmed">Slet</button>
                </div>
            </div>
        </div>
    </div>
}

@* Toast popup message *@
@if (!string.IsNullOrEmpty(toastMessage))
{
    <div class="toast-container position-fixed bottom-0 end-0 p-3" style="z-index: 1055;">
        <div class="toast align-items-center text-white bg-success border-0 show" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="d-flex">
                <div class="toast-body">
                    @toastMessage
                </div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" @onclick="() => toastMessage = null" aria-label="Close"></button>
            </div>
        </div>
    </div>
}

@code {
    private List<Recipe>? recipes;

    private bool showConfirm = false;
    private int recipeIdToDelete;
    private string recipeTitleToDelete = "";
    private string? toastMessage;
    private List<string> shoppingList = new();

    protected override async Task OnInitializedAsync()
    {
        recipes = await RecipeService.GetRecipesAsync();
    }

    private void GoToCreate() => Navigation.NavigateTo("/create-recipe");

    private void EditRecipe(int id) => Navigation.NavigateTo($"/edit-recipe/{id}");

    private void ConfirmDelete(int id, string title)
    {
        recipeIdToDelete = id;
        recipeTitleToDelete = title;
        showConfirm = true;
    }

    private async Task DeleteConfirmed()
    {
        await RecipeService.DeleteRecipeAsync(recipeIdToDelete);
        recipes = await RecipeService.GetRecipesAsync();
        showConfirm = false;
    }

    private async void ShowToast(string message)
    {
        toastMessage = message;
        StateHasChanged(); // Update UI
        await Task.Delay(5000); // Wait 3 seconds
        toastMessage = null;
        StateHasChanged(); // Hide toast again
    }

    private async Task SaveRecipe(int recipeId)
    {
        try
        {
            await RecipeService.SaveRecipeAsync(recipeId);
            ShowToast("Opskrift gemt!");
            Console.WriteLine($"Recipe saved. Id: {recipeId}");
        }
        catch (Exception ex)
        {
            ShowToast("Fejl: Kunne ikke gemme opskriften");
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    private void AddRecipeToShoppingList(Recipe recipe)
    {
        foreach (var ingredient in recipe.Ingredients)
        {
            if (!shoppingList.Contains(ingredient)) // Avoid duplicates
            {
                shoppingList.Add(ingredient);
            }
        }
        ShowToast($"Ingredienser fra '{recipe.Title}' tilføjet!");
    }

    private void RemoveFromShoppingList(string item)
    {
        shoppingList.Remove(item);
    }

    private void ClearShoppingList()
    {
        shoppingList.Clear();
    }

}
